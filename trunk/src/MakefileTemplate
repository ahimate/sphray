##############################################################################
##############################################################################
#                                                                            #
#                SPHRAY Makefile - Written by Gabriel Altay                  #
#                                                                            #
##############################################################################
##############################################################################


# Runtime Macros 
#=============================================================================
#
# These control the particle data structure and the code operation 
# in the case of the recombination macros.  The default is for all
# these flags to be commented out. 

#OPT += -DincHe      # if you want to include Helium
#OPT += -DoutGammaHI # if you want to output HI photoionization rate

#OPT += -DincHrec  # if you want seperate rays traced for H recomb. radiation
#OPT += -DincHerec # if you want seperate rays traced for He recomb. radiation


# System Definitions
#=============================================================================
#
# The following system definitions can be usefull in setting 
# the variables FC (Fortran Compiler) and FFLAGS (Compiler Flags).
# I have used some features from the Fortran 2003 standard which gfortran 
# hasn't implemented (yet).  The non OpenGL version compiles with g95 while
# both the OpenGL and non-OpenGL versions compile with the Intel compiler. 


SYSTEM=generic_ifort_opt
#SYSTEM=generic_ifort_fast
#SYSTEM=generic_g95_opt
#SYSTEM=generic_gfortran_opt

#SYSTEM=cdm
#SYSTEM=profile_ifort
#SYSTEM=debug_ifort


#=============================================================================
#=============================================================================
CC= gcc
CFLAGS= -O3


#IFORTFLAGS= -ftz -fpe0 -g -traceback -heap-arrays -warn all -fpp 
IFORTFLAGS= -ftz -fpe0 -g -traceback -heap-arrays -fpp 


ifeq ($(SYSTEM),generic_ifort_opt)
   FC= ifort
   FFLAGS= $(IFORTFLAGS) -O3 
endif

ifeq ($(SYSTEM),generic_ifort_fast)
   FC= ifort
   FFLAGS= $(IFORTFLAGS) -fast
endif

ifeq ($(SYSTEM),cdm)
   FC=f95
   FFLAGS= 
endif

ifeq ($(SYSTEM),debug_ifort)
   FC= ifort
   FFLAGS= $(IFORTFLAGS) 
endif

ifeq ($(SYSTEM),profile_ifort)
   FC= ifort
   FFLAGS= $(IFORTFLAGS) -p
endif

ifeq ($(SYSTEM),generic_g95_opt)
   FC= g95
   FFLAGS= -O3 -ffast-math -cpp
endif

ifeq ($(SYSTEM),generic_gfortran_opt)
   FC= gfortran
   FFLAGS= -O3 -Wall -frecord-marker=4 -g -frange-check
endif

# Set Library/Include/Module/RunTime flags for compiler.
#=============================================================================
ifeq ($(FC),ifort)
   ISLIB= -L
   ISINC= -I
   ISMOD= -I
   ISRLIB= -Wl,rpath=
endif

ifeq ($(FC),f95)
   ISLIB= -L
   ISINC= -I
   ISMOD= -M
   ISRLIB= -R
endif

ifeq ($(FC),g95)
   ISLIB= -L
   ISINC= -I
   ISMOD= -M
   ISRLIB= -R
endif



APPS= sphray 

#--------------------

SRC= 	myf90.o \
	physical_constants.o \
	mt19937.o \
	m_mrgrnk.o \
	pluecker.o \
	cosmology.o \
	particle_system.o \
	b2cd.o \
	hui_gnedin_atomic_rates.o \
	cen_atomic_rates.o \
	hummer_atomic_rates.o  \
	spectra.o \
	sphpar.o \
	octtree3.o \
	ray.o \
	raylist.o \
	global.o \
	config.o \
	atomic_rates.o \
	source_input.o \
	gadget_input.o \
	main_input.o \
	ionpar.o \
	euler.o \
	bdf.o \
	iliev_comparison_project.o \
	output.o \
	ion_temperature_update.o \
	initialize.o \
	mainloop.o 


#=============================================================================
# these only need to be set if you are using the OpenGL visiualization tool
# Note that you need to compile f03gl with the same Fortran 90 compiler you 
# use to compile SPHRAY.  A make will produce the executable sphray while
# make glsphray will produce the executable glsphray
#=============================================================================

# local OpenGL directory (should not need to be changed) 
#-----------------------------------------------------------------------------
LCLGLDIR = OpenGL

#  change this to correspond to your GLUT implementation
#-----------------------------------------------------------------------------
# GLUT= glut
# GLUT= openglut
  GLUT= freeglut

GLSRC=  $(LCLGLDIR)/GLUT_fonts.o \
	$(LCLGLDIR)/OpenGL_gl.o  \
	$(LCLGLDIR)/OpenGL_glu.o \
	$(LCLGLDIR)/OpenGL_${GLUT}.o 

THRDSRC= $(LCLGLDIR)/fthread.o $(LCLGLDIR)/pt.o $(LCLGLDIR)/ptf77.o 

VIEWSRC= $(GLSRC) $(THRDSRC)


#  Comment out for 32-bit architecture
#-----------------------------------------------------------------------------
BITS= 64

#  The OpenGL / GLUT libraries 
#-----------------------------------------------------------------------------
DIROGL= ${ISLIB}/usr/lib${BITS} $(ISLIB)./$(LCLGLDIR) 
LIBOGL= -lglut -lGL -lGLU

#  The X11 libraries 
#-----------------------------------------------------------------------------
DIRX11= ${ISLIB}/usr/X11R6/lib${BITS}
LIBX11= -lXaw -lXt -lXmu -lXi -lXext -lX11 -lm -lXxf86vm




# f03gl dir (f03gl should be compiled with the same Fortran as used here)
#-----------------------------------------------------------------------------
#DIRF03GL= $(ISLIB)/home/galtay/usr/f03gl-$(FC)



# multi threading and local GLUT library
#=============================================================================


DIRTHRD = ${ISLIB}./$(LCLGLDIR)
LIBTHRD = -lpthread -lpt

DIRSVIEW = $(DIROGL) $(DIRX11) $(DIRTHRD) $(DIRF03GL) 

LIBSVIEW = ${LIBOGL} ${LIBX11} $(LIBTHRD) -lg2c -ldl


# Targets
#=============================================================================
#
# Implicit Rules
#----------------
#
# $@ = name of target 
# $< = name of first dependency
# $^ = name of all dependencies with duplicates removed
# $? = name of all dependencies newer than the target
# $+ = name of all dependencies w/o duplicates removed
#

F2OBJ= -c    # Fortran flag to compile to object without linking
FNAME= -o    # Fortran flag to name output file

C2OBJ= -c    # C flag to compile to object without linking
CNAME= -o    # C flag to name output file

all:$(APPS)


# Main SPHRAY application
#=============================================================================

sphray: $(SRC) sphray.o
	$(FC) $(FFLAGS) $^ $(FNAME) $@


# OpenGL Targets
#=============================================================================


# Create libpt library (for starting a seperate thread)

$(LCLGLDIR)/libpt.a: $(THRDSRC) $(LCLGLDIR)/pt.h
	ar crv $(LCLGLDIR)/libpt.a $(LCLGLDIR)/pt.o $(LCLGLDIR)/ptf77.o
	ranlib $(LCLGLDIR)/libpt.a

# SPHRAY with OpenGL viewer

glsphray: $(SRC) $(VIEWSRC) viewer.o $(LCLGLDIR)/libpt.a glsphray.o  
	${FC} $^ $(DIRSVIEW) $(LIBSVIEW) $(FNAME) $@



# Test density estimates (in progress) 
#=============================================================================

density_test: $(SRC) density_test.o
	$(FC) $(FFLAGS) -o $@ $^ 


# Implicit Rules
#=============================================================================

%.o: %.F90 
	$(FC) $(FFLAGS) $(F2OBJ) $< $(FNAME) $@

%.o: %.f90 
	$(FC) $(FFLAGS) $(F2OBJ) $< $(FNAME) $@

%.o: %.f 
	$(FC) $(FFLAGS) $(F2OBJ) $< $(FNAME) $@

%.o: %.c
	$(CC) $(CFLAGS) $(C2OBJ) $< $(CNAME) $@




# Standard Cleaning Targets
#=============================================================================

clean :
	rm -f *.o *.mod *__genmod.f90 \
	$(LCLGLDIR)/libpt.a $(LCLGLDIR)/*.o $(LCLGLDIR)/*.mod

cleanall :
	rm -f *.o *.mod *__genmod.f90 \
	$(LCLGLDIR)/libpt.a $(LCLGLDIR)/*.o $(LCLGLDIR)/*.mod \
	density_test glsphray $(APPS) 

tidy :
	rm -f *~ 












