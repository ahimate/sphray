#=============================================================================
# these preprocessor macros determine the data structure of a particle
# and can be used to determine what sections of the code need not be 
# compiled.  The default (and simplest) case is to have all of them
# commented out.  
#=============================================================================

#OPT += -DincHe    # if you want to include Helium
#OPT += -DincHrec  # if you want seperate rays traced for H recomb. radiation
#OPT += -DincHerec # if you want seperate rays traced for He recomb. radiation

#OPT += -DoutGamma # if you want to output HI photoionization rate

#=============================================================================
# the following system definitions can be usefull in setting 
# the variables FC (Fortran Compiler) and FFLAGS (Compiler Flags).
# I have used some features from the Fortran 2003 standard which gfortran 
# hasn't implemented (yet).  The non OpenGL version compiles with g95 while
# both the OpenGL and non-OpenGL versions compile with the intel compiler. 
#=============================================================================

SYSTEM=generic_ift_opt
#SYSTEM=generic_g95_opt
#SYSTEM=generic_gfortran_opt

#SYSTEM=cdm
#SYSTEM=profile_ift
#SYSTEM=debug_ift





#=============================================================================
#=============================================================================

IFORTFLAGS= -ftz -fpe0 -g -traceback -heap-arrays -warn all -fpp 
IFORTFLAGS= -ftz -fpe0 -g -traceback -heap-arrays -fpp 

ifeq ($(SYSTEM),cdm)
   FC=f95
   FFLAGS= 
endif


ifeq ($(SYSTEM),debug_ift)
   FC= ifort
   FFLAGS= $(IFORTFLAGS) 
endif


ifeq ($(SYSTEM),profile_ift)
   FC= ifort
   FFLAGS= $(IFORTFLAGS) -p
endif


ifeq ($(SYSTEM),generic_ift_opt)
   FC= ifort
   FFLAGS= $(IFORTFLAGS) -O3 
endif


ifeq ($(SYSTEM),generic_g95_opt)
   FC= g95
   FFLAGS= -O3 -ffast-math -cpp
endif


ifeq ($(SYSTEM),generic_gfortran_opt)
   FC= gfortran
   FFLAGS= -O3 -Wall -frecord-marker=4 -g -frange-check
endif

#-------------------------------------------------------------------
ifeq ($(FC),f95)
   ISLIB= -L
   ISINC= -I
   ISMOD= -M
   ISRLIB= -R
endif

ifeq ($(FC),ifort)
   ISLIB= -L
   ISINC= -I
   ISMOD= -I
   ISRLIB= -Wl,rpath=
endif

APPS= sphray 

#--------------------

FILES= myf90.o physical_constants.o mt19937.o m_mrgrnk.o \
       pluecker.o cosmology.o particle_system.o b2cd.o \
       HuiGnedinAtomicRates.o CenAtomicRates.o \
       HummerAtomicRates.o  \
       spectra.o sphpar.o octtree3.o ray.o raylist.o global.o \
       config.o atomic_rates.o \
       source_input.o gadget_input.o main_input.o \
       ionpar.o euler.o bdf.o \
       iliev_comparison_project.o output.o \
       ion_temperature_update.o \
       initialize.o mainloop.o 


#=============================================================================
# these only need to be set if you are using the OpenGL visiualization tool
# Note that you need to compile f03gl with the same Fortran 90 compiler you 
# use to compile SPHRAY.  A make will produce the executable sphray while
# make glsphray will produce the executable glsphray
#=============================================================================

GLDIR := OpenGL

#  Comment out for 32-bit architecture
BITS      := 64

#  The directories containing the OpenGL libraries and GLUT libraries
OGLLIBDIR   := ${ISLIB}/usr/lib${BITS} 

#  Libraries for OpenGL, including GLUT, GLU and OpenGL
OGLLIB := -lglut -lGL -lGLU


#  The directory containing the X11 libraries
X11LIBDIR := ${ISLIB}/usr/X11R6/lib${BITS}

#  The X11 libraries
X11LIB := -lXaw -lXt -lXmu -lXi -lXext -lX11 -lm -lXxf86vm


# f03gl dir
F03GLDIR := /home/galtay/usr/f03gl

#  If you use OpenGLUT or FreeGlut, change this variable and adjust
#  the libraries appropriately.
# GLUT      := glut
# GLUT      := openglut
 GLUT      := freeglut

LIBRARIES := ${OGLLIBDIR} ${X11LIBDIR} ${ISLIB}/usr/local/lib${BITS} $(ISLIB)$(F03GLDIR)
GLLIBS    := ${OGLLIB} ${X11LIB} -lg2c -lpthread -ldl
MODULES   := $(GLDIR)/GLUT_fonts.o $(GLDIR)/OpenGL_${GLUT}.o $(GLDIR)/OpenGL_glu.o $(GLDIR)/OpenGL_gl.o 


THREAD_OPTIONS = ${ISLIB}./$(GLDIR) -lpthread -lpt

#=============================================================================

all:$(APPS)

sphray: $(FILES) sphray.o
	$(FC) $(FFLAGS) -o $@ $^ 

$(GLDIR)/GLUT_fonts.o: $(GLDIR)/GLUT_fonts.c
	cc -c -o $(GLDIR)/GLUT_fonts.o $(GLDIR)/GLUT_fonts.c


$(GLDIR)/OpenGL_gl.o: $(GLDIR)/OpenGL_gl.F90
	$(FC) $(FFLAGS) $(OPT) -c -o $(GLDIR)/OpenGL_gl.o $(GLDIR)/OpenGL_gl.F90 

$(GLDIR)/OpenGL_glu.o: $(GLDIR)/OpenGL_glu.F90 $(GLDIR)/OpenGL_gl.o
	$(FC) $(FFLAGS) $(OPT) -c -o $(GLDIR)/OpenGL_glu.o $(GLDIR)/OpenGL_glu.F90

$(GLDIR)/OpenGL_${GLUT}.o: $(GLDIR)/OpenGL_${GLUT}.F90 $(GLDIR)/OpenGL_gl.o $(GLDIR)/OpenGL_glu.o 
	$(FC) $(FFLAGS) $(OPT) -c -o $(GLDIR)/OpenGL_${GLUT}.o $(GLDIR)/OpenGL_${GLUT}.F90  


$(GLDIR)/libpt.a: $(GLDIR)/pt.c $(GLDIR)/ptf77.c $(GLDIR)/pt.h
	cc -c -o $(GLDIR)/pt.o $(GLDIR)/pt.c
	cc -c -o $(GLDIR)/ptf77.o $(GLDIR)/ptf77.c
	ar crv $(GLDIR)/libpt.a $(GLDIR)/pt.o $(GLDIR)/ptf77.o
	ranlib $(GLDIR)/libpt.a


glsphray: %: %.F90 $(MODULES) $(FILES) viewer.o $(GLDIR)/fthread.o $(GLDIR)/libpt.a 
	${FC} ${FFLAGS} -c -o glsphray.o $< 
	${FC} $@.o ${FILES} $(GLDIR)/fthread.o viewer.o $(GLDIR)/libpt.a $(THREAD_OPTIONS) ${MODULES} ${LIBRARIES} ${GLLIBS} -o $@



density_test: $(FILES) density_test.o
	$(FC) $(FFLAGS) -o $@ $^ 


%.o: %.F90 
	$(FC) $(FFLAGS) $(OPT) $(INCLUDE) -c -o $@ $<

%.o: %.f90 
	$(FC) $(FFLAGS) $(OPT) $(INCLUDE) -c -o $@ $<


clean :
	rm -f *.o *.mod *__genmod.f90 $(GLDIR)/libpt.a $(GLDIR)/*.o $(GLDIR)/*.mod

cleanall :
	rm -f *.o *.mod *__genmod.f90 $(GLDIR)/libpt.a $(GLDIR)/*.o $(GLDIR)/*.mod density_test glsphray $(APPS) 

tidy :
	rm -f *~ 




force: 







